'use client';

import { GiftRequest } from '@/types/gifts';

interface CategorySectionProps {
  request: GiftRequest;
  onChange: (updates: Partial<GiftRequest>) => void;
}

const categories = [
  { id: 'mother', label: '–ú–∞–º–µ', emoji: 'üë©', auto: { gender: 'female', age: 'adult' } },
  { id: 'father', label: '–ü–∞–ø–µ', emoji: 'üë®', auto: { gender: 'male', age: 'adult' } },
  { id: 'girlfriend', label: '–î–µ–≤—É—à–∫–µ', emoji: 'üíÉ', auto: { gender: 'female', age: 'adult' } },
  { id: 'boyfriend', label: '–ü–∞—Ä–Ω—é', emoji: 'üï∫', auto: { gender: 'male', age: 'adult' } },
  { id: 'friend', label: '–î—Ä—É–≥—É', emoji: 'üë®‚Äçü§ù‚Äçüë®', auto: { gender: 'male', age: 'adult' } },
  { id: 'friend_female', label: '–ü–æ–¥—Ä—É–≥–µ', emoji: 'üë©‚Äçü§ù‚Äçüë©', auto: { gender: 'female', age: 'adult' } },
  { id: 'child', label: '–†–µ–±—ë–Ω–∫—É', emoji: 'üßí', auto: { age: 'child' } },
  { id: 'colleague', label: '–ö–æ–ª–ª–µ–≥–µ', emoji: 'üíº', auto: { age: 'adult' } },
];

export function CategorySection({ request, onChange }: CategorySectionProps) {
  const handleCategorySelect = (categoryId: string) => {
    const category = categories.find(c => c.id === categoryId);
    
    if (category) {
      onChange({
        category: categoryId,
        ...category.auto
      });
    }
  };

  return (
    <div>
      <h3 className="text-l md:text-xl font-accent font-semibold mb-3 md:mb-4 text-foreground">
        –ö–æ–º—É –∏—â–µ–º –ø–æ–¥–∞—Ä–æ–∫?
      </h3>
      <p className="text-sm md:text-base text-muted-foreground mb-4 md:mb-6">
        –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äî –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–∏–º –ø–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç
      </p>
      
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 md:gap-3">
        {categories.map((category) => (
          <button
            key={category.id}
            onClick={() => handleCategorySelect(category.id)}
            className={`
              p-3 md:p-4 rounded-xl border-2 transition-all duration-200
              flex flex-col items-center justify-center space-y-1 md:space-y-2
              ${request.category === category.id
                ? 'bg-primary border-primary text-primary-foreground shadow-md scale-105'
                : 'bg-card border-border text-foreground hover:border-primary hover:shadow-md'
              }
            `}
          >
            <span className="text-xl md:text-2xl">{category.emoji}</span>
            <span className="font-medium text-xs md:text-sm text-center">{category.label}</span>
          </button>
        ))}
      </div>
      
      {request.category && (
        <div className="mt-3 md:mt-4 p-2 md:p-3 bg-accent rounded-lg">
          <p className="text-xs md:text-sm text-accent-foreground">
            ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {
              categories.find(c => c.id === request.category)?.auto.gender 
                ? `–ü–æ–ª: ${request.gender === 'female' ? '–∂–µ–Ω—Å–∫–∏–π' : '–º—É–∂—Å–∫–æ–π'}, ` 
                : ''
            }–í–æ–∑—Ä–∞—Å—Ç: {request.age === 'child' ? '—Ä–µ–±–µ–Ω–æ–∫' : '–≤–∑—Ä–æ—Å–ª—ã–π'}
          </p>
        </div>
      )}
    </div>
  );
}