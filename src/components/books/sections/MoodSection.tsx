'use client';

import { BookRequest } from '@/types/books';

interface MoodSectionProps {
  request: BookRequest;
  onChange: (updates: Partial<BookRequest>) => void;
}

const moodOptions = [
  { id: 'relax', label: '–†–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è', emoji: 'üòå', hints: ['–õ—ë–≥–∫–∏–µ —Ä–æ–º–∞–Ω—ã', '–Æ–º–æ—Ä', '–î–µ—Ç–µ–∫—Ç–∏–≤—ã'] },
  { id: 'inspire', label: '–í–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è', emoji: '‚ú®', hints: ['–ë–∏–æ–≥—Ä–∞—Ñ–∏–∏', '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', '–ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞'] },
  { id: 'think', label: '–ü–æ–¥—É–º–∞—Ç—å', emoji: 'ü§î', hints: ['–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–ù–∞—É—á–ø–æ–ø', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è'] },
  { id: 'entertain', label: '–†–∞–∑–≤–ª–µ—á—å—Å—è', emoji: 'üòÑ', hints: ['–¢—Ä–∏–ª–ª–µ—Ä—ã', '–§—ç–Ω—Ç–µ–∑–∏', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'] },
  { id: 'learn', label: '–£–∑–Ω–∞—Ç—å –Ω–æ–≤–æ–µ', emoji: 'üìö', hints: ['–ù–∞—É—á–ø–æ–ø', '–ò—Å—Ç–æ—Ä–∏—è', '–ö—É–ª—å—Ç—É—Ä–∞'] },
  { id: 'emotions', label: '–ü–µ—Ä–µ–∂–∏—Ç—å —ç–º–æ—Ü–∏–∏', emoji: 'üíï', hints: ['–î—Ä–∞–º–∞', '–†–æ–º–∞–Ω—Ç–∏–∫–∞', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω'] },
  { id: 'escape', label: '–ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä', emoji: 'üåå', hints: ['–§—ç–Ω—Ç–µ–∑–∏', '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω'] },
  { id: 'any', label: '–õ—é–±–æ–µ', emoji: 'üéØ', hints: ['–†–∞–∑–Ω—ã–µ –∂–∞–Ω—Ä—ã', '–ö–ª–∞—Å—Å–∏–∫–∞', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–∑–∞'] }
];

export function MoodSection({ request, onChange }: MoodSectionProps) {
  const handleMoodSelect = (moodId: string) => {
    onChange({ mood: moodId });
  };

  return (
    <div>
      <h3 className="
        text-xl md:text-2xl lg:text-3xl font-accent 
        mb-3 md:mb-4 text-foreground
      ">
        –ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?
      </h3>
      <p className="text-sm md:text-base text-muted-foreground mb-4 md:mb-6">
        –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å —á—Ç–µ–Ω–∏—è ‚Äî –º—ã –ø–æ–¥—Å–∫–∞–∂–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∂–∞–Ω—Ä—ã
      </p>
      
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 md:gap-3">
        {moodOptions.map((mood) => (
          <button
            key={mood.id}
            onClick={() => handleMoodSelect(mood.id)}
            className={`
              p-3 md:p-4 rounded-xl border-2 transition-all duration-200
              flex flex-col items-center justify-center space-y-1 md:space-y-2
              ${request.mood === mood.id
                ? 'bg-primary border-primary text-primary-foreground shadow-md scale-105'
                : 'bg-card border-border text-foreground hover:border-primary hover:shadow-md'
              }
            `}
          >
            <span className="text-xl md:text-2xl">{mood.emoji}</span>
            <span className="font-medium text-xs md:text-sm text-center">{mood.label}</span>
          </button>
        ))}
      </div>
      
      {request.mood && (
        <div className="mt-3 md:mt-4 p-2 md:p-3 bg-accent rounded-lg">
          <p className="text-xs md:text-sm text-accent-foreground">
            üí° –ß–∞—Å—Ç–æ –≤—ã–±–∏—Ä–∞—é—Ç: {moodOptions.find(m => m.id === request.mood)?.hints?.join(', ')}
          </p>
        </div>
      )}
    </div>
  );
}