'use client';

import { MovieRequest, MovieResponse } from '@/types/movies';
import { ContextSection } from './sections/ContextSection';
import { MoodSection } from './sections/MoodSection';
import { FiltersSection } from './sections/FiltersSection';
import { SelectedOptions } from './SelectedOptions';
import { TrendingBanner } from './TrendingBanner';
import { MovieActions } from './MovieActions';
import { useMovieGeneration } from './hooks/useMovieGeneration';
import { useRandomMovies } from './hooks/useRandomMovies';
import { User, Film, Settings } from 'lucide-react';
import { useState } from 'react';

interface MovieGeneratorProps {
  onMovieGenerated?: (movie: MovieResponse) => void;
  isGenerating?: boolean;
  onGeneratingChange?: (generating: boolean) => void;
  onRequestChange?: (request: MovieRequest) => void;
  currentRequest?: MovieRequest;
  onClearMovie?: () => void;
}

export function MovieGenerator({
  onMovieGenerated,
  isGenerating = false,
  onGeneratingChange,
  currentRequest = {},
  onClearMovie
}: MovieGeneratorProps) {
  const [activeSection, setActiveSection] = useState<'context' | 'mood' | 'filters'>('context');
 const { movieRequest, isValid, handleRequestChange, setIsGenerating } = useMovieGeneration(currentRequest);
  const { generateRandomRequest } = useRandomMovies();

  // const handleGenerate = async () => {
  //   if (!isValid || isGenerating) return;
  //   onClearMovie?.();
  //   onGeneratingChange?.(true);
  
  //   // üîç –õ–û–ì–ò–†–£–ï–ú –ì–û–¢–û–í–´–ô –û–ë–™–ï–ö–¢ –î–õ–Ø –ë–≠–ö–ï–ù–î–ê
  //   console.log('üé¨ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –ë–≠–ö–ï–ù–î:', movieRequest);
  
  //   // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
  //   setTimeout(() => {
  //     const mockMovie: MovieResponse = {
  //       recommendation: {
  //         id: '1',
  //         title: '–û–¥–∏–Ω –¥–æ–º–∞',
  //         type: 'movie',
  //         genre: ['–∫–æ–º–µ–¥–∏—è', '—Å–µ–º–µ–π–Ω—ã–π'],
  //         releaseYear: 1990,
  //         description: '–ú–∞–ª—å—á–∏–∫ –ö–µ–≤–∏–Ω –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –¥–æ–º–∞ –Ω–∞ –†–æ–∂–¥–µ—Å—Ç–≤–æ –∏ –∑–∞—â–∏—â–∞–µ—Ç —Å–≤–æ–π –¥–æ–º –æ—Ç –≥—Ä–∞–±–∏—Ç–µ–ª–µ–π.',
  //         whyMatch: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - —Å–º–µ—à–Ω–∞—è –∏ –¥–æ–±—Ä–∞—è –∫–æ–º–µ–¥–∏—è',
  //         runtime: '1—á 43–º',
  //         productionCountry: '–°–®–ê'
  //       },
  //       generationId: '123'
  //     };
      
  //     onMovieGenerated?.(mockMovie);
  //     onGeneratingChange?.(false);
  //   }, 2000);
  // };
  

  const handleGenerate = async () => {
    if (!isValid || isGenerating) return;
    onClearMovie?.();
    onGeneratingChange?.(true);

    try {
      const requestBody = {
        category: "Films",
        parameters: {
          context: movieRequest.context,
          mood: movieRequest.mood,
          genres: movieRequest.genres || [],
          format: movieRequest.format || [],
          duration: movieRequest.duration,
          year: movieRequest.year,
          country: movieRequest.country,
          rating: movieRequest.rating
        }
      };

      console.log('üé¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', requestBody);

      const response = await fetch('/api/prompt-templates/generate-structured', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} - ${errorText}`);
      }

      const apiResponse = await response.json();
      console.log('üé¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', apiResponse);

      // –§—É–Ω–∫—Ü–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
      const adaptApiResponse = (apiData: any) => {
        return {
          ...apiData,
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º genre –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤
          genre: typeof apiData.genre === 'string' 
            ? apiData.genre.split(', ').map((g: string) => g.trim())
            : apiData.genre || [],
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º actors –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤
          actors: typeof apiData.actors === 'string'
            ? apiData.actors.split(', ').map((a: string) => a.trim())
            : apiData.actors || [],
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º streamingPlatforms –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤
          streamingPlatforms: typeof apiData.streamingPlatforms === 'string'
            ? apiData.streamingPlatforms.split(', ').map((p: string) => p.trim())
            : apiData.streamingPlatforms || [],
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º tags –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤
          tags: typeof apiData.tags === 'string'
            ? apiData.tags.split(', ').map((t: string) => t.trim())
            : apiData.tags || [],
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º releaseYear –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          releaseYear: typeof apiData.releaseYear === 'string' 
            ? parseInt(apiData.releaseYear) 
            : apiData.releaseYear,
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º kinopoiskRating –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          kinopoiskRating: typeof apiData.kinopoiskRating === 'string'
            ? parseFloat(apiData.kinopoiskRating)
            : apiData.kinopoiskRating,
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º imdbRating –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          imdbRating: typeof apiData.imdbRating === 'string'
            ? parseFloat(apiData.imdbRating)
            : apiData.imdbRating
        };
      };

      const movieData: MovieResponse = {
        recommendation: {
          ...adaptApiResponse(apiResponse.jsonStructuredResponse),
          id: Date.now().toString(),
        },
        generationId: Date.now().toString()
      };

      console.log('üé¨ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', movieData);
      onMovieGenerated?.(movieData);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–∞:', error);
    } finally {
      onGeneratingChange?.(false);
    }
  };

  // const handleLucky = async () => {
  //   onClearMovie?.();
  //   onGeneratingChange?.(true);
    
  //   const randomRequest = generateRandomRequest();
    
  //   // üîç –õ–û–ì–ò–†–£–ï–ú –†–ê–ù–î–û–ú–ù–´–ô –û–ë–™–ï–ö–¢ –î–õ–Ø –ë–≠–ö–ï–ù–î–ê
  //   console.log('üé≤ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –†–ê–ù–î–û–ú–ù–´–ô –ó–ê–ü–†–û–°:', randomRequest);
  
  //   // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
  //   setTimeout(() => {
  //     const mockMovie: MovieResponse = {
  //       recommendation: {
  //         id: `lucky-${Date.now()}`,
  //         title: '–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º',
  //         type: 'movie',
  //         genre: randomRequest.genres || [],
  //         releaseYear: 2020,
  //         description: '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!',
  //         whyMatch: '–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è',
  //         runtime: '1—á 30–º - 2—á 10–º',
  //         productionCountry: '–°–®–ê'
  //       },
  //       generationId: `lucky-${Date.now()}`
  //     };
      
  //     onMovieGenerated?.(mockMovie);
  //     onGeneratingChange?.(false);
  //   }, 2000);
  // };

  const handleLucky = async () => {
    onClearMovie?.();
    onGeneratingChange?.(true);
    
    const randomRequest = generateRandomRequest();
    
    try {
      const response = await fetch('/api/prompt-templates/generate-structured', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          templateName: "smart_movie_recommendation",
          category: "Movies", 
          parameters: randomRequest
        })
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ API');

      const apiResponse = await response.json();
      const movieData: MovieResponse = {
        recommendation: {
          ...apiResponse.jsonStructuredResponse,
          id: `lucky-${Date.now()}`
        },
        generationId: `lucky-${Date.now()}`
      };

      onMovieGenerated?.(movieData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞:', error);
    } finally {
      onGeneratingChange?.(false);
    }
  };

  return (
    <div className="space-y-6">
      <TrendingBanner />
      <SelectedOptions request={movieRequest} />
      
      <div className="bg-card rounded-2xl shadow-lg p-6">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º */}
        <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-1 mb-6 md:mb-8 p-2 sm:p-1 bg-muted rounded-xl">
          {[
            { id: 'context' as const, label: '–° –∫–µ–º —Å–º–æ—Ç—Ä–∏–º', icon: <User size={16} /> },
            { id: 'mood' as const, label: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', icon: <Film size={16} /> },
            { id: 'filters' as const, label: '–§–∏–ª—å—Ç—Ä—ã', icon: <Settings size={16} /> }
          ].map((section) => (
            <button
              key={section.id}
              onClick={() => setActiveSection(section.id)}
              className={`flex items-center space-x-2 px-3 py-2 sm:px-4 sm:py-3 rounded-lg transition-all flex-1 justify-center text-sm sm:text-base ${
                activeSection === section.id
                  ? 'bg-background text-foreground shadow-sm'
                  : 'text-muted-foreground hover:text-foreground'
              }`}
            >
              {section.icon}
              <span className="font-medium">{section.label}</span>
            </button>
          ))}
        </div>

        {/* –°–µ–∫—Ü–∏–∏ —Ñ–æ—Ä–º—ã */}
        <div className="mb-6 min-h-[300px]">
          {activeSection === 'context' && (
            <ContextSection request={movieRequest} onChange={handleRequestChange} />
          )}
          {activeSection === 'mood' && (
            <MoodSection request={movieRequest} onChange={handleRequestChange} />
          )}
          {activeSection === 'filters' && (
            <FiltersSection request={movieRequest} onChange={handleRequestChange} />
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <MovieActions
          isFormValid={isValid} // üëà –Ø–≤–Ω–æ –≥–æ–≤–æ—Ä–∏–º TypeScript —á—Ç–æ —ç—Ç–æ boolean
          isGenerating={isGenerating}
          onGenerate={handleGenerate}
          onLucky={handleLucky}
        />

        {!isValid && (
          <p className="text-sm text-muted-foreground mt-3 text-center">
            –í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–µ–º —Å–º–æ—Ç—Ä–∏–º –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ 2+ –∂–∞–Ω—Ä–∞
          </p>
        )}
      </div>
    </div>
  );
}