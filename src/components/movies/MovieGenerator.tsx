'use client';

import { MovieRequest, MovieResponse } from '@/types/movies';
import { ContextSection } from './sections/ContextSection';
import { MoodSection } from './sections/MoodSection';
import { FiltersSection } from './sections/FiltersSection';
import { SelectedOptions } from './SelectedOptions';
import { TrendingBanner } from './TrendingBanner';
import { MovieActions } from './MovieActions';
import { useMovieGeneration } from './hooks/useMovieGeneration';
import { useRandomMovies } from './hooks/useRandomMovies';
import { User, Film, Settings } from 'lucide-react';
import { useState } from 'react';

interface MovieGeneratorProps {
  onMovieGenerated?: (movie: MovieResponse) => void;
  isGenerating?: boolean;
  onGeneratingChange?: (generating: boolean) => void;
  onRequestChange?: (request: MovieRequest) => void;
  currentRequest?: MovieRequest;
  onClearMovie?: () => void;
}

export function MovieGenerator({
  onMovieGenerated,
  isGenerating = false,
  onGeneratingChange,
  currentRequest = {},
  onClearMovie
}: MovieGeneratorProps) {
  const [activeSection, setActiveSection] = useState<'context' | 'mood' | 'filters'>('context');
  const { movieRequest, isFormValid, handleRequestChange } = useMovieGeneration(currentRequest);
  const { generateRandomRequest } = useRandomMovies();

  const handleGenerate = async () => {
    if (!isFormValid() || isGenerating) return;
    onClearMovie?.();
    onGeneratingChange?.(true);
    
    // TODO: –†–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
    setTimeout(() => {
      const mockMovie: MovieResponse = {
        recommendation: {
          id: '1',
          title: '–û–¥–∏–Ω –¥–æ–º–∞',
          type: 'movie',
          genre: ['–∫–æ–º–µ–¥–∏—è', '—Å–µ–º–µ–π–Ω—ã–π'],
          year: 1990,
          description: '–ú–∞–ª—å—á–∏–∫ –ö–µ–≤–∏–Ω –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –¥–æ–º–∞ –Ω–∞ –†–æ–∂–¥–µ—Å—Ç–≤–æ –∏ –∑–∞—â–∏—â–∞–µ—Ç —Å–≤–æ–π –¥–æ–º –æ—Ç –≥—Ä–∞–±–∏—Ç–µ–ª–µ–π.',
          whyMatch: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - —Å–º–µ—à–Ω–∞—è –∏ –¥–æ–±—Ä–∞—è –∫–æ–º–µ–¥–∏—è',
          duration: '1—á 43–º',
          country: '–°–®–ê'
        },
        generationId: '123'
      };
      
      onMovieGenerated?.(mockMovie);
      onGeneratingChange?.(false);
    }, 2000);
  };

  const handleLucky = async () => {
    onClearMovie?.();
    onGeneratingChange?.(true);
    
    const randomRequest = generateRandomRequest();
    console.log('üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', randomRequest);
    
    // TODO: –†–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ —Å randomRequest
    setTimeout(() => {
      const mockMovie: MovieResponse = {
        recommendation: {
          id: `lucky-${Date.now()}`,
          title: '–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º',
          type: 'movie',
          genre: randomRequest.genres || [],
          year: 2020,
          description: '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!',
          whyMatch: '–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è',
          duration: '1—á 30–º - 2—á 10–º',
          country: '–°–®–ê'
        },
        generationId: `lucky-${Date.now()}`
      };
      
      onMovieGenerated?.(mockMovie);
      onGeneratingChange?.(false);
    }, 2000);
  };

  return (
    <div className="space-y-6">
      <TrendingBanner />
      <SelectedOptions request={movieRequest} />
      
      <div className="bg-card rounded-2xl shadow-lg p-6">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º */}
        <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-1 mb-6 md:mb-8 p-2 sm:p-1 bg-muted rounded-xl">
          {[
            { id: 'context' as const, label: '–° –∫–µ–º —Å–º–æ—Ç—Ä–∏–º', icon: <User size={16} /> },
            { id: 'mood' as const, label: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', icon: <Film size={16} /> },
            { id: 'filters' as const, label: '–§–∏–ª—å—Ç—Ä—ã', icon: <Settings size={16} /> }
          ].map((section) => (
            <button
              key={section.id}
              onClick={() => setActiveSection(section.id)}
              className={`flex items-center space-x-2 px-3 py-2 sm:px-4 sm:py-3 rounded-lg transition-all flex-1 justify-center text-sm sm:text-base ${
                activeSection === section.id
                  ? 'bg-background text-foreground shadow-sm'
                  : 'text-muted-foreground hover:text-foreground'
              }`}
            >
              {section.icon}
              <span className="font-medium">{section.label}</span>
            </button>
          ))}
        </div>

        {/* –°–µ–∫—Ü–∏–∏ —Ñ–æ—Ä–º—ã */}
        <div className="mb-6 min-h-[300px]">
          {activeSection === 'context' && (
            <ContextSection request={movieRequest} onChange={handleRequestChange} />
          )}
          {activeSection === 'mood' && (
            <MoodSection request={movieRequest} onChange={handleRequestChange} />
          )}
          {activeSection === 'filters' && (
            <FiltersSection request={movieRequest} onChange={handleRequestChange} />
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <MovieActions
          isFormValid={isFormValid()}
          isGenerating={isGenerating}
          onGenerate={handleGenerate}
          onLucky={handleLucky}
        />

        {!isFormValid() && (
          <p className="text-sm text-muted-foreground mt-3 text-center">
            –í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–µ–º —Å–º–æ—Ç—Ä–∏–º –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ 2+ –∂–∞–Ω—Ä–∞
          </p>
        )}
      </div>
    </div>
  );
}