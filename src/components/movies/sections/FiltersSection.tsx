'use client';

import { MovieRequest } from '@/types/movies';

interface FiltersSectionProps {
  request: MovieRequest;
  onChange: (updates: Partial<MovieRequest>) => void;
}

const formatOptions = [
  { id: 'movie', label: 'üé¨ –§–∏–ª—å–º' },
  { id: 'series', label: 'üì∫ –°–µ—Ä–∏–∞–ª' },
  { id: 'cartoon', label: 'üê∞ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º' },
  { id: 'anime', label: 'üáØüáµ –ê–Ω–∏–º–µ' }
];

const durationOptions = [
  { id: 'short', label: '–ö–æ—Ä–æ—Ç–∫–∏–π (–¥–æ 90 –º–∏–Ω)' },
  { id: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π (90-150 –º–∏–Ω)' },
  { id: 'long', label: '–î–ª–∏–Ω–Ω—ã–π (150+ –º–∏–Ω)' },
  { id: 'any', label: '–õ—é–±–∞—è' }
];

const yearOptions = [
  { id: '2020s', label: '2020-–µ –≥–æ–¥—ã' },
  { id: '2010s', label: '2010-–µ –≥–æ–¥—ã' },
  { id: '2000s', label: '2000-–µ –≥–æ–¥—ã' },
  { id: '90s', label: '90-–µ –≥–æ–¥—ã' },
  { id: '80s', label: '80-–µ –≥–æ–¥—ã' },
  { id: '70s', label: '70-–µ –≥–æ–¥—ã' },
  { id: 'classic', label: '–ö–ª–∞—Å—Å–∏–∫–∞ (–¥–æ 70-—Ö)' },
  { id: 'any', label: '–õ—é–±–æ–π –≥–æ–¥' }
];

const countryOptions = [
  { id: 'russia', label: 'üá∑üá∫ –†–æ—Å—Å–∏—è' },
  { id: 'usa', label: 'üá∫üá∏ –°–®–ê' },
  { id: 'europe', label: 'üá™üá∫ –ï–≤—Ä–æ–ø–∞' },
  { id: 'korea', label: 'üá∞üá∑ –ö–æ—Ä–µ—è' },
  { id: 'japan', label: 'üáØüáµ –Ø–ø–æ–Ω–∏—è' },
  { id: 'china', label: 'üá®üá≥ –ö–∏—Ç–∞–π' },
  { id: 'india', label: 'üáÆüá≥ –ò–Ω–¥–∏—è' },
  { id: 'latin', label: 'üáßüá∑ –õ–∞—Ç–∏–Ω—Å–∫–∞—è –ê–º–µ—Ä–∏–∫–∞' },
  { id: 'any', label: '–õ—é–±–∞—è —Å—Ç—Ä–∞–Ω–∞' }
];

const ratingOptions = [
  { id: 'high', label: '–í—ã—Å–æ–∫–∏–π (8.0+)' },
  { id: 'good', label: '–•–æ—Ä–æ—à–∏–π (7.0-8.0)' },
  { id: 'average', label: '–°—Ä–µ–¥–Ω–∏–π (6.0-7.0)' },
  { id: 'any', label: '–õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥' }
];

export function FiltersSection({ request, onChange }: FiltersSectionProps) {
  const toggleFormat = (format: string) => {
    const currentFormats = request.format || [];
    const newFormats = currentFormats.includes(format)
      ? currentFormats.filter(f => f !== format)
      : [...currentFormats, format];
    
    onChange({ format: newFormats });
  };

  const handleSingleSelect = (field: keyof MovieRequest, value: string) => {
    if (request[field] === value) {
      onChange({ [field]: undefined });
    } else {
      onChange({ [field]: value });
    }
  };

  return (
    <div className="space-y-6 md:space-y-8">
      <div>
        <h3 className="
          text-xl md:text-2xl lg:text-3xl font-accent 
          mb-3 md:mb-4 text-foreground
        ">
          –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        </h3>
        <p className="text-sm md:text-base text-muted-foreground mb-4 md:mb-6">
          –£—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        </p>
      </div>
      
      {/* –§–æ—Ä–º–∞—Ç */}
      <div>
        <h4 className="text-m md:text-l lg:text-xl text-foreground mb-3">üì∫ –§–æ—Ä–º–∞—Ç</h4>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {formatOptions.map((format) => (
            <button
              key={format.id}
              onClick={() => toggleFormat(format.id)}
              className={`p-3 rounded-lg border text-center transition-all ${
                request.format?.includes(format.id)
                  ? 'bg-primary text-primary-foreground border-primary shadow-sm'
                  : 'bg-card border-border hover:border-primary hover:bg-accent'
              }`}
            >
              <div className="text-sm font-medium">{format.label}</div>
            </button>
          ))}
        </div>
      </div>

      {/* –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å */}
      <div>
        <h4 className="text-m md:text-l lg:text-xl text-foreground mb-3">‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h4>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {durationOptions.map((duration) => (
            <button
              key={duration.id}
              onClick={() => handleSingleSelect('duration', duration.id)}
              className={`p-3 rounded-lg border text-center transition-all ${
                request.duration === duration.id
                  ? 'bg-primary text-primary-foreground border-primary shadow-sm'
                  : 'bg-card border-border hover:border-primary hover:bg-accent'
              }`}
            >
              <div className="text-sm font-medium">{duration.label}</div>
            </button>
          ))}
        </div>
      </div>

      {/* –ì–æ–¥ –≤—ã—Ö–æ–¥–∞ */}
      <div>
        <h4 className="text-m md:text-l lg:text-xl text-foreground mb-3">üìÖ –ì–æ–¥ –≤—ã—Ö–æ–¥–∞</h4>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {yearOptions.map((year) => (
            <button
              key={year.id}
              onClick={() => handleSingleSelect('year', year.id)}
              className={`p-3 rounded-lg border text-center transition-all ${
                request.year === year.id
                  ? 'bg-primary text-primary-foreground border-primary shadow-sm'
                  : 'bg-card border-border hover:border-primary hover:bg-accent'
              }`}
            >
              <div className="text-sm font-medium">{year.label}</div>
            </button>
          ))}
        </div>
      </div>

      {/* –°—Ç—Ä–∞–Ω–∞ */}
      <div>
        <h4 className="text-m md:text-l lg:text-xl text-foreground mb-3">üåç –°—Ç—Ä–∞–Ω–∞</h4>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {countryOptions.map((country) => (
            <button
              key={country.id}
              onClick={() => handleSingleSelect('country', country.id)}
              className={`p-3 rounded-lg border text-center transition-all ${
                request.country === country.id
                  ? 'bg-primary text-primary-foreground border-primary shadow-sm'
                  : 'bg-card border-border hover:border-primary hover:bg-accent'
              }`}
            >
              <div className="text-sm font-medium">{country.label}</div>
            </button>
          ))}
        </div>
      </div>

      {/* –†–µ–π—Ç–∏–Ω–≥ */}
      <div>
        <h4 className="text-m md:text-l lg:text-xl text-foreground mb-3">‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫/IMDb</h4>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {ratingOptions.map((rating) => (
            <button
              key={rating.id}
              onClick={() => handleSingleSelect('rating', rating.id)}
              className={`p-3 rounded-lg border text-center transition-all ${
                request.rating === rating.id
                  ? 'bg-primary text-primary-foreground border-primary shadow-sm'
                  : 'bg-card border-border hover:border-primary hover:bg-accent'
              }`}
            >
              <div className="text-sm font-medium">{rating.label}</div>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
}