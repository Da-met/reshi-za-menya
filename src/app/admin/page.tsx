'use client';

import { useState, useEffect } from 'react';
import { adminModules } from '@/config/admin-modules';
import { Save, ChevronDown, ChevronRight, Plus, X } from 'lucide-react';
import { Prompt, AdminModule, AdminPrompt } from '@/types/prompt';
import { savePrompt, deletePrompt, fetchAllPrompts } from '@/lib/api/prompts';
import { ParametersEditor } from '@/components/admin/ParametersEditor';
import { PromptBasicInfo } from '@/components/admin/PromptBasicInfo';

export default function AdminPage() {
  const [selectedModule, setSelectedModule] = useState<AdminModule>(adminModules[0] as AdminModule);
  const [selectedPrompt, setSelectedPrompt] = useState<AdminPrompt>(adminModules[0].prompts[0] as AdminPrompt);
  const [prompts, setPrompts] = useState<Prompt[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [expandedModules, setExpandedModules] = useState<Record<string, boolean>>({});
  const [newlyCreatedPromptId, setNewlyCreatedPromptId] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
  const loadPrompts = async () => {
    setIsLoading(true);
    try {
      const ourData = await fetchAllPrompts();
      setPrompts(ourData);
      
      console.log('üì• –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:', ourData);
      
    } catch (error) {
      console.log('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
      setPrompts([]);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–æ–ª—è –ø—Ä–æ–º–ø—Ç–∞
  const updatePromptField = (promptId: string, field: string, value: any) => {
    setPrompts(prev => prev.map(p =>
      p.id === promptId ? { ...p, [field]: value } : p
    ));
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const addParameter = (promptId: string, paramType: 'required' | 'optional' | 'output') => {
    setPrompts(prev => prev.map(p =>
      p.id === promptId ? {
        ...p,
        [`${paramType}Parameters`]: [...p[`${paramType}Parameters`], { parameterValue: '', comment: '' }]
      } : p
    ));
  };

  const updateParameter = (
    promptId: string,
    paramType: 'required' | 'optional' | 'output',
    index: number,
    field: 'parameterValue' | 'comment',
    value: string
  ) => {
    setPrompts(prev => prev.map(p =>
      p.id === promptId ? {
        ...p,
        [`${paramType}Parameters`]: p[`${paramType}Parameters`].map((param, i) =>
          i === index ? { ...param, [field]: value } : param
        )
      } : p
    ));
  };

  const removeParameter = (
    promptId: string,
    paramType: 'required' | 'optional' | 'output',
    index: number
  ) => {
    setPrompts(prev => prev.map(p =>
      p.id === promptId ? {
        ...p,
        [`${paramType}Parameters`]: p[`${paramType}Parameters`].filter((_, i) => i !== index)
      } : p
    ));
  };


  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const handleSavePrompt = async (prompt: Prompt) => {
    try {
      await savePrompt(prompt);
      alert('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
      loadPrompts();
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
  const handleDeletePrompt = async (promptId: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç?')) {
      return;
    }
    
    try {
      await deletePrompt(promptId);
      alert('–ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω!');
      loadPrompts();
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    }
  };

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  const createNewPrompt = () => {
    const newId = `new-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    const newPrompt: Prompt = {
      id: newId,
      moduleName: selectedModule.category,
      promptKey: selectedPrompt.key,
      text: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∑–¥–µ—Å—å...',
      description: selectedPrompt.description,
      variables: [...selectedPrompt.variables],
      requiredParameters: [],
      optionalParameters: [],
      outputParameters: [],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    setPrompts(prev => [...prev, newPrompt]);
    setNewlyCreatedPromptId(newId); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  };

  // –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
  const currentPrompt = prompts.find(p => {
    const found = p.moduleName === selectedModule.category && p.promptKey === selectedPrompt.key;
    console.log('üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–º–ø—Ç–∞:', {
      'moduleName –∏–∑ API': p.moduleName,
      'category –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞': selectedModule.category,
      'promptKey –∏–∑ API': p.promptKey, 
      'key –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞': selectedPrompt.key,
      '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ': found
    });
    return found;
  });

  console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:', currentPrompt);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤—ã–±–æ—Ä–∞
  useEffect(() => {
    setNewlyCreatedPromptId(null);
  }, [selectedModule, selectedPrompt]);


  // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    loadPrompts();
  }, []);


  // –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
        <header className="text-center mb-8">
          <h1 className="text-3xl md:text-4xl font-bold text-foreground mb-2">
            –†–ï–î–ê–ö–¢–û–† –ü–†–û–ú–ü–¢–û–í
          </h1>
          <p className="text-lg text-muted-foreground mb-4">
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
          </p>
          <button
            onClick={loadPrompts}
            disabled={isLoading}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50"
          >
            {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫'}
          </button>
        </header>

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {prompts.length > 0 && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
            <h3 className="font-semibold text-blue-800 mb-2">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:</h3>
            {prompts.map(prompt => (
              <div key={prompt.id} className="text-sm text-blue-700 mb-2">
                <div><strong>ID:</strong> {prompt.id}</div>
                <div><strong>–ú–æ–¥—É–ª—å:</strong> {prompt.moduleName}</div>
                <div><strong>–ö–ª—é—á:</strong> {prompt.promptKey}</div>
                <div><strong>–¢–µ–∫—Å—Ç:</strong> {prompt.text.substring(0, 50)}...</div>
              </div>
            ))}
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 max-w-7xl mx-auto">
          {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
          <div className="lg:col-span-1">
            <div className="bg-card rounded-lg border border-border p-4 sticky top-4">
              <h2 className="text-lg font-semibold mb-4">–ú–æ–¥—É–ª–∏</h2>
              <div className="space-y-2">
                {adminModules.map((module: AdminModule) => {
                  const isExpanded = expandedModules[module.id] ?? true;
                  
                  return (
                    <div key={module.id} className="mb-2">
                      <button
                        onClick={() => setExpandedModules(prev => ({
                          ...prev,
                          [module.id]: !isExpanded
                        }))}
                        className="w-full text-left p-3 rounded-lg bg-muted hover:bg-muted/80 transition-colors flex items-center justify-between"
                      >
                        <div className="font-medium">{module.name}</div>
                        {isExpanded ? <ChevronDown className="w-4 h-4" /> : <ChevronRight className="w-4 h-4" />}
                      </button>
                      
                      {isExpanded && (
                        <div className="mt-2 ml-2 space-y-1">
                          {module.prompts.map((prompt: AdminPrompt) => (
                            <button
                              key={prompt.key}
                              onClick={() => {
                                setSelectedModule(module);
                                setSelectedPrompt(prompt);
                              }}
                              className={`w-full text-left p-2 rounded text-sm transition-colors ${
                                selectedModule.id === module.id && selectedPrompt.key === prompt.key
                                  ? 'bg-primary text-primary-foreground'
                                  : 'hover:bg-muted'
                              }`}
                            >
                              {prompt.name}
                            </button>
                          ))}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          </div>

          {/* –û–±–ª–∞—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <div className="lg:col-span-3">
            {currentPrompt ? (
              // –†–µ–¥–∞–∫—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
              <div className="space-y-6">
                <PromptBasicInfo
                  prompt={currentPrompt!} // –î–æ–±–∞–≤—å—Ç–µ ! –∑–¥–µ—Å—å
                  onUpdatePrompt={updatePromptField}
                  selectedModule={selectedModule}
                  selectedPrompt={selectedPrompt}
                />
                <ParametersEditor
                  prompt={currentPrompt!} // –î–æ–±–∞–≤—å—Ç–µ ! –∑–¥–µ—Å—å
                  onUpdateParameter={updateParameter}
                  onAddParameter={addParameter}
                  onRemoveParameter={removeParameter}
                />
                
                {/* –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å */}
                <div className="bg-card rounded-lg border border-border p-4">
                  <div className="flex flex-col sm:flex-row gap-3 justify-between items-center">
                    <div className="text-sm text-muted-foreground text-center sm:text-left">
                      {currentPrompt!.id.startsWith('new-') // –î–æ–±–∞–≤—å—Ç–µ ! –∑–¥–µ—Å—å
                        ? '–ì–æ—Ç–æ–≤—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç?'
                        : `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${new Date(currentPrompt!.updatedAt).toLocaleDateString('ru-RU')}` // –î–æ–±–∞–≤—å—Ç–µ ! –∑–¥–µ—Å—å
                      }
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleSavePrompt(currentPrompt!)} // –î–æ–±–∞–≤—å—Ç–µ ! –∑–¥–µ—Å—å
                        className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 text-sm"
                      >
                        <Save className="w-4 h-4" />
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                      </button>
                      {!currentPrompt!.id.startsWith('new-') && ( // –î–æ–±–∞–≤—å—Ç–µ ! –∑–¥–µ—Å—å
                        <button
                          onClick={() => handleDeletePrompt(currentPrompt!.id)} // –î–æ–±–∞–≤—å—Ç–µ ! –∑–¥–µ—Å—å
                          className="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 text-sm"
                        >
                          <X className="w-4 h-4" />
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
              <div className="bg-card rounded-lg border border-border p-12 text-center">
                <h3 className="text-xl font-semibold text-muted-foreground mb-4">
                  –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                </h3>
                <p className="text-muted-foreground mb-4">
                  –î–ª—è "{selectedModule.name}" - "{selectedPrompt.name}"
                </p>
                <button
                  onClick={createNewPrompt}
                  className="bg-primary text-primary-foreground px-4 py-2 rounded-lg"
                >
                  –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}